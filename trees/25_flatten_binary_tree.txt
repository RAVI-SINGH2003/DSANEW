1. Recursive solution
tc : o(n)  sc : o(n)
void solve(TreeNode * root,TreeNode* &prev)
{
    if(root==NULL) return;
    solve(root->right,prev);
    solve(root->left,prev);
    root->left = NULL;
    root->right = prev;
    prev = root;
    
}
void flatten(TreeNode* root) {
    TreeNode * prev = NULL;
    solve(root,prev);
}

2.Stack solution
tc : o(n)  sc : o(n)
 void flatten(TreeNode* root) {
      
      stack<TreeNode * > st;
        st.push(root);
        while(!st.empty() && root!=NULL){
            TreeNode * temp = st.top();
            st.pop();
            if(temp->right)
            st.push(temp->right);
            if(temp->left)
            st.push(temp->left);
            if(!st.empty())
            temp->right = st.top();
            temp->left = NULL;
        }
    }

3. Morris Traversal 
tc : o(n)  sc : o(1)

void flatten(TreeNode* root) {
TreeNode * curr = root;
while(curr!=NULL){
    if(curr->left){
        TreeNode * temp  = curr->left;
        while(temp->right) temp = temp->right;
        temp->right = curr->right;
        curr -> right = curr ->left;
        curr->left = NULL;
    }
    curr = curr->right;
}
}