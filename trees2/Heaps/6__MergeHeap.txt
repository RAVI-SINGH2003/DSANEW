// merge arrays to form new and build heap from merged array

class Solution{
    public:
    void heapify(vector<int> & ans ,int i ,int s){
        int largest = i;
        int left = 2*i+1;
        int right = 2*i+2;
        if(left < s && ans[left] > ans[largest]){
            largest = left;
        }
        if(right < s && ans[right] > ans[largest]){
            largest = right;
        }
        if(largest!=i){
            swap(ans[i],ans[largest]);
            heapify(ans,largest,s);
        }
    }
    vector<int> mergeHeaps(vector<int> &a, vector<int> &b, int n, int m) {
        vector<int> ans;
        for(int e : a) ans.push_back(e);
        for(int e : b) ans.push_back(e);
        int s = m +n;
        for(int i =s/2-1;i>=0;i--){
            heapify(ans,i,s);
        }
        return ans;
    }
};


// keep on heap as it is and insrt the keys of other one

class Solution{
    public:
    void heapify(vector<int> & ans ,int i ,int s){
        int largest = i;
        int left = 2*i+1;
        int right = 2*i+2;
        if(left < s && ans[left] > ans[largest]){
            largest = left;
        }
        if(right < s && ans[right] > ans[largest]){
            largest = right;
        }
        if(largest!=i){
            swap(ans[i],ans[largest]);
            heapify(ans,largest,s);
        }
    }
    vector<int> mergeHeaps(vector<int> &a, vector<int> &b, int n, int m) {
        vector<int> ans;
        for(int e : a) ans.push_back(e);
        for(int e : b) ans.push_back(e);
        int s = m +n;
        for(int i =s/2-1;i>=0;i--){
            heapify(ans,i,s);
        }
        return ans;
    }
};