tc :  o(h) 
in worst case o(n)
class Solution {
public:

    TreeNode* deleteNode(TreeNode* root, int key) {
       if(root==NULL) return root; 
        //searching the node;
        TreeNode * curr = root;
        TreeNode * prev = NULL;
        while(curr!=NULL){
            if(curr->val==key){
                break;
            }
            if(key<curr->val){
                prev = curr;
                curr = curr->left;
            }
            else{
                prev = curr;
                curr = curr->right;
            }
            
        }
        //key is not in tree so no need of delete
        if(curr==NULL){
            return root;
        }
        TreeNode * leftSubTree = curr->left;
        TreeNode * rightSubTree = curr->right;
        
        //finding the smallest value in the rightSubTree if rightSubTree!=NULL
        if(rightSubTree!=NULL){
            TreeNode * temp  = rightSubTree;
            while(temp->left!=NULL) temp = temp->left;
            temp->left = leftSubTree;
        }
        if(prev==NULL){
          return !rightSubTree ? leftSubTree :rightSubTree ;
        }
        else if(prev->val>curr->val){
             prev->left = !rightSubTree ? leftSubTree :rightSubTree;
        }
        else{
            prev->right = !rightSubTree ? leftSubTree :rightSubTree;
        }    
     
        return root;

    }
};