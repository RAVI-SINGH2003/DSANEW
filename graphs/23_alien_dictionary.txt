string findOrder(string dict[], int N, int K) {
    vector<int> adj[K];
    for(int i=0;i<N-1;i++){
        string s1 = dict[i];
        string s2 = dict[i+1];
        int sz1 = s1.size();
        int sz2 = s2.size();
        for(int k=0 ;k<min(sz1,sz2); k++){
            if(s1[k]!=s2[k]){
               adj[s1[k]-'a'].push_back(s2[k]-'a');   
            }
        }
    }
        
    
    //calculating indegree of each node
    vector<int> indegree(K,0);
    for(int node=0;node<K;node++){
        for(int nbr : adj[node]) indegree[nbr]++;
    }
    queue<int> q;
    //push nodes with 0 indegree in queue
    for(int node=0;node<K;node++){
        if(indegree[node]==0) 
        {
            q.push(node);
        }
    }
    string ans = "";
    //apply Kahns algo
    while(!q.empty()){
        int node = q.front();
        ans.push_back(node + 'a');
        q.pop();
        for(int nbr : adj[node]){
            indegree[nbr]--;
            if(indegree[nbr]==0){
                q.push(nbr);
            }
        }
    }
    //if the size of topo sort is not equal to no of vertices then it means there is a cycle in graph or deadlock
    if(ans.size()!=K) return {};
    return ans;
}