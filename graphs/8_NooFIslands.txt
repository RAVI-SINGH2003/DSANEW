TC : O(N*M)
void dfs(vector<vector<char>>& grid, int i , int j , vector<vector<bool>> & visited,int n ,int m){
         visited[i][j] = true;
            for(int y=-1;y<=1;y++)
              if(i+x <n && i+x >=0 && j+y < m && j+y >=0 && !visited[i+x][j+y] && grid[i+x][j+y]=='1')
                dfs(grid,i+x,j+y,visited,n,m);
    }
    int numIslands(vector<vector<char>>& grid) {
      int n = grid.size();
      int m = grid[0].size();
      vector<vector<bool>> visited (n,vector<bool>(m,false));
      int count = 0;
      for(int i=0;i<n;i++){
          for(int j=0;j<m;j++){
              if(!visited[i][j] && grid[i][j]=='1'){
                  dfs(grid , i , j , visited,n,m);
                  count++;
              }
          }
      }
      return count ;
    }

TC : O(N*M)
void bfs(vector<vector<char>>& grid, int i , int j , vector<vector<bool>> & visited,int n ,int m){
        queue<pair<int,int>> q;
        q.push({i,j});
        visited[i][j] = true;
        while(!q.empty()){ 
          int r = q.front().first;
          int c = q.front().second;
          q.pop();
          for(int x = -1 ; x<=1;x++)
          for(int y=-1;y<=1;y++)
            if(r+x <n && r+x >=0 && c+y < m && c+y >=0 && !visited[r+x][c+y] && grid[r+x][c+y]=='1')
              {
                  q.push({r+x , c+y});
                  visited[r+x][c+y] = true;
              }
        }
        
  }
  int numIslands(vector<vector<char>>& grid) {
    int n = grid.size();
    int m = grid[0].size();
    vector<vector<bool>> visited (n,vector<bool>(m,false));
    int count = 0;
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(!visited[i][j] && grid[i][j]=='1'){
                bfs(grid , i , j , visited,n,m);
                count++;
            }
        }
    }
    return count ;
  }