TC : O(nlogm) + O(n)

vector<int> shortestPath(int n, int m, vector<vector<int>>& edges) {
    vector<pair<int,int>> adj[n+1];
    for(auto  v: edges){
        adj[v[0]].push_back({v[1],v[2]});
        adj[v[1]].push_back({v[0],v[2]});
    }
    priority_queue<pair<int,int> ,vector<pair<int,int>>,greater<pair<int,int>>> minHeap;
    vector<int> parent(n+1);
    for(int i=1;i<=n;i++){
        parent[i] = i;
    }
    vector<int> dis(n+1,1e9);
    dis[1] = 0;
    minHeap.push({0,1});
    
    while(!minHeap.empty()){
        int node = minHeap.top().second;
        int dist  = minHeap.top().first;
        minHeap.pop();
        for(auto p : adj[node]){
            int edgeWeight = p.second;
            int adjNode = p.first;
            if(dist + edgeWeight < dis[adjNode]){
                parent[adjNode] = node;
                dis[adjNode] = dist + edgeWeight;
                minHeap.push({dis[adjNode],adjNode});
            }
        }
    }
    vector<int> path;
    int node = n;

    //O(n) -- if graph is linear
    while(parent[node]!=node){
        path.push_back(node);
        node = parent[node];
    }
    if(node==1){
        path.push_back(1);
    }
    else{
        return {-1};
    }
    reverse(path.begin(),path.end());
    return path;
}