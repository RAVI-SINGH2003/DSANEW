#Approach - 1 Using Dijakstra Algo.

vector<int> dijakstra(int src ,int n,int m ,vector<pair<int,int>> adj[]){
    set<pair<int,int>> sett;
    sett.insert({0,src});
    vector<int> dist(n,1e9);
    while(!sett.empty()){
        auto it = sett.begin();
        int node = (*it).second;
        int dis = (*it).first;
        sett.erase(it);
        for(auto p: adj[node] ){
            int nbr = p.first;
            int edgWt = p.second;
            if(edgWt + dis  < dist[nbr]){
                if(dist[nbr]!=1e9)
                sett.erase({dist[nbr],nbr});
                dist[nbr] = edgWt + dis;
                sett.insert({edgWt + dis , nbr});
            }
        }
    }
    return dist;
}
int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {
    int m = edges.size();
    vector<vector<int>> cost;
    vector<pair<int,int>> adj[n];
    for(auto edge : edges){
        adj[edge[0]].push_back({edge[1],edge[2]});
        adj[edge[1]].push_back({edge[0],edge[2]});
    }
    for(int i=0;i<n;i++){
        cost.push_back(dijakstra(i,n,m,adj));
    }
    vector<int> nbrCount(n,0);
    for(int i=0;i<n;i++){
        int count = 0;
        for(int j=0;j<n;j++){
            if(i!=j && cost[i][j] <= distanceThreshold){
                count++;
            }
        }
        nbrCount[i] = count;
    }
    int ansCity = 0;
    int miniNbr = INT_MAX;
    for(int i=0;i<n;i++){
        if(nbrCount[i] <= miniNbr){
            miniNbr = nbrCount[i];
            ansCity = i;
        }
    }
    return ansCity;
}

#Approach - 2 Using Floyd Warshall

int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {
    int m = edges.size();
    vector<vector<int>> cost(n,vector<int>(n,1e9));
    for(auto & edge : edges){
        cost[edge[0]][edge[1]] = edge[2];
        cost[edge[1]][edge[0]] = edge[2];
    }
    for(int i=0;i<n;i++){
        cost[i][i] = 0;
    }
    for(int via = 0; via < n; via++){
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                cost[i][j] = min(cost[i][j],cost[i][via] + cost[via][j]);
            }
        }
    }
    vector<int> nbrCount(n,0);
    for(int i=0;i<n;i++){
        int count = 0;
        for(int j=0;j<n;j++){
            if(i!=j && cost[i][j] <= distanceThreshold){
                count++;
            }
        }
        nbrCount[i] = count;
    }
    int ansCity = 0;
    int miniNbr = INT_MAX;
    for(int i=0;i<n;i++){
        if(nbrCount[i] <= miniNbr){
            miniNbr = nbrCount[i];
            ansCity = i;
        }
    }
    return ansCity;
}